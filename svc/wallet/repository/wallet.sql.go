// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: wallet.sql

package wallet_repository

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_id, name, public_key, mnemonic) VALUES ($1, $2, $3, $4) RETURNING user_id, name, public_key, mnemonic, created_at, updated_at
`

type CreateWalletParams struct {
	UserID    string `json:"user_id"`
	Name      string `json:"name"`
	PublicKey string `json:"public_key"`
	Mnemonic  string `json:"mnemonic"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.createWalletStmt, createWallet,
		arg.UserID,
		arg.Name,
		arg.PublicKey,
		arg.Mnemonic,
	)
	var i Wallet
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.PublicKey,
		&i.Mnemonic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets WHERE user_id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.deleteWalletStmt, deleteWallet, userID)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT user_id, name, public_key, mnemonic, created_at, updated_at FROM wallets WHERE user_id = $1
`

func (q *Queries) GetWallet(ctx context.Context, userID string) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletStmt, getWallet, userID)
	var i Wallet
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.PublicKey,
		&i.Mnemonic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByPublicKey = `-- name: GetWalletByPublicKey :one
SELECT user_id, name, public_key, mnemonic, created_at, updated_at FROM wallets WHERE public_key = $1
`

func (q *Queries) GetWalletByPublicKey(ctx context.Context, publicKey string) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletByPublicKeyStmt, getWalletByPublicKey, publicKey)
	var i Wallet
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.PublicKey,
		&i.Mnemonic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets SET name = $2, mnemonic = $3 WHERE user_id = $1 RETURNING user_id, name, public_key, mnemonic, created_at, updated_at
`

type UpdateWalletParams struct {
	UserID   string `json:"user_id"`
	Name     string `json:"name"`
	Mnemonic string `json:"mnemonic"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.updateWalletStmt, updateWallet, arg.UserID, arg.Name, arg.Mnemonic)
	var i Wallet
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.PublicKey,
		&i.Mnemonic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
