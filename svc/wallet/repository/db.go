// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package wallet_repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.deleteWalletStmt, err = db.PrepareContext(ctx, deleteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWallet: %w", err)
	}
	if q.getWalletStmt, err = db.PrepareContext(ctx, getWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetWallet: %w", err)
	}
	if q.getWalletByPublicKeyStmt, err = db.PrepareContext(ctx, getWalletByPublicKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletByPublicKey: %w", err)
	}
	if q.updateWalletStmt, err = db.PrepareContext(ctx, updateWallet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWallet: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.deleteWalletStmt != nil {
		if cerr := q.deleteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWalletStmt: %w", cerr)
		}
	}
	if q.getWalletStmt != nil {
		if cerr := q.getWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletStmt: %w", cerr)
		}
	}
	if q.getWalletByPublicKeyStmt != nil {
		if cerr := q.getWalletByPublicKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletByPublicKeyStmt: %w", cerr)
		}
	}
	if q.updateWalletStmt != nil {
		if cerr := q.updateWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWalletStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createWalletStmt         *sql.Stmt
	deleteWalletStmt         *sql.Stmt
	getWalletStmt            *sql.Stmt
	getWalletByPublicKeyStmt *sql.Stmt
	updateWalletStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createWalletStmt:         q.createWalletStmt,
		deleteWalletStmt:         q.deleteWalletStmt,
		getWalletStmt:            q.getWalletStmt,
		getWalletByPublicKeyStmt: q.getWalletByPublicKeyStmt,
		updateWalletStmt:         q.updateWalletStmt,
	}
}
